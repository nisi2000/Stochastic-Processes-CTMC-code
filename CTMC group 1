import numpy as np
import math
from sympy import symbols, Eq, solve


# no of rows are equal to the number of columns.
n = int(input("Enter the number of rows in a matrix"))
tpm = [[0 for x in range (n)] for y in range(n)]
for i in range (n):
    for j in range(n):
        tpm[i][j]=float(input())
print(tpm)


#take input of lambda
lmda=[]
for i in range(n):
    x=int(input("enter the value of lambda"))
    lmda.append(x)
print(lmda)


#exponential matrix
z_mat=np.zeros((n,n))
for i in range(n):
    for j in range(n):
        if i!=j:    
            z_mat[i][j]=lmda[i]
        
print(z_mat)


#generator matrix final
g_mat=np.zeros((n,n))
for i in range(n):
    for j in range(n):
        g_mat[i][j]=z_mat[i][j]*tpm[i][j]
        
for i in range(n):
    for j in range(n):
        if i==j:
            g_mat[i][j]=lmda[i]-2*(lmda[i])
print(g_mat)


vals=[]
a=1
for i in range(n):
    for j in range(n):
        vals.append(g_mat[j][i])
print(vals)

l={}
for i in range(0,3*n,n):
    l[i]=vals[i:i+3]
print(l)


vals=[]
a=1
for i in range(n):
    for j in range(n):
        vals.append(g_mat[j][i])
print(vals)

l={}
for i in range(0,3*n,n):
    l[i]=vals[i:i+3]
print(l)


#uniformized matrix
i=np.identity(n)
l_max=(max(lmda))**(-1)

h_mat=g_mat*l_max
k_mat=i+h_mat
print(k_mat)


# imported the library sympy
# defining symbols used in equations
# or unknown variables
x, y, z = symbols('x,y,z')

# defining equations
eq1 = Eq((x+y+z), 1)
print("Equation 1:")
print(eq1)

eq2 = Eq((l[3][0]*x+l[3][1]*y+l[3][2]*z), 0)
print("Equation 2")
print(eq2)

eq3 = Eq((l[6][0]*x+l[6][1]*y+l[6][2]*z), 0)
print("Equation 3")
print(eq3)

# solving the equation and printing the
# value of unknown variables
print("Values of 3 unknown variable are as follows:")
print(solve((eq1, eq2, eq3), (x, y, z)))


tpm1=np.mat(tpm)
pow1=tpm1**100
print(pow1)


a_mat=np.zeros((n,n))
t=float(input("Enter t value "))
for i in range (n):
    for j in range (n):
        a_mat[i][j]=math.exp(g_mat[i][j]*t)
print(a_mat)
